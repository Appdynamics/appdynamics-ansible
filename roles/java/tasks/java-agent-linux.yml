---
# App owners would either need to chown the entire agent folder to their app's user OR grant their app's user read/write access to the agent folder
- name: Java Linux Block
  become: true
  block:
    - name: Clean out orphanned {{ java_agent_dest_file }}
      file:
        path: "{{ java_agent_dest_folder_linux }}/{{ java_agent_dest_file }}"
        state: absent
      changed_when: false # this ensures this task is idempotent

    - name: Check if java agent exists
      stat: 
        path: "{{ java_agent_dest_folder_linux }}/javaagent.jar"
      register: previous_agent

    - name: Backup old java agent to /tmp folder
      archive:
        path: "{{ java_agent_dest_folder_linux }}"
        dest: "/tmp/java_agent.{{ ansible_date_time.iso8601 }}.zip"
        mode: 0755
      when: previous_agent.stat.exists
      changed_when: false

    - name: Clean up old agent after
      file:
        path: "{{ java_agent_dest_folder_linux }}"
        state: absent
      changed_when: false

    - name: Ensures application agent dir exists
      file:
        path: "{{ java_agent_dest_folder_linux }}/"
        state: directory
        mode: 0755
        recurse: yes
      changed_when: false # this ensures this task is idempotent

     # add delegate_to: localhost for customers who are unable to download on the remote server
    - name: Download Java Agent
      get_url:
        url: "{{ agent_download_url.stdout }}"
        dest: "{{ java_agent_dest_folder_linux }}/{{ java_agent_dest_file }}"
        force: true # download a new file even if javaagent.zip exists.
      changed_when: false
      register: result
      failed_when: result.status_code != 200

    - debug:
         msg: "{{ result }}"

    # Keeping downloading and unziping seperate tasks
    # as not all customers are allowd to download on the remote servers.
    - name: Unzip the Java agent file
      unarchive:
        #src: "{{ agent_download_url.stdout }}"
        src: "{{ java_agent_dest_folder_linux }}/{{ java_agent_dest_file }}"
        dest: "{{ java_agent_dest_folder_linux }}"
        mode: 0755
        remote_src: yes
      changed_when: false

    - name: Configure Java agent's controller-info.xml
      template:
        src: templates/application-agent-controller-info.xml.j2
        dest: '{{ java_agent_dest_folder_linux }}/conf/controller-info.xml'
        mode: 0755
      changed_when: false

    - name: find the version specific directory name
      find:
        paths: "{{ java_agent_dest_folder_linux }}"
        patterns: "ver{{ agent_version }}*"
        file_type: directory
      register: result

    - name: Set the version folder fact
      set_fact:
        java_agent_ver_folder: "{{ result.files[0].path }}" # "{{ ver.stdout | regex_replace ('\\r\\n', '') }}"

    - name: Copy controller-info.xml to the versioned agent folder
      shell: cp  {{ java_agent_dest_folder_linux }}/conf/controller-info.xml  {{ java_agent_ver_folder }}/conf/
      changed_when: false

    # --------------------------------------------------------------------------
    # Update the Log4j setting to apply the desired log level to all the loggers
    # listed in the {{agent_loggers}} tha need to be matched. The XML module
    # requires that tags and attributes be present if changes are to be applied
    # For this reason, we first look for all mataches and then apply them.
    - name: set the log level on the agent (if != info, which it is by default)
      become: false
      block:
      - debug:
          msg: "Requested log level = {{ agent_log_level }} - Logger = {{ agent_loggers }}"

      - name: create a local directory to manipulate the log4j file
        tempfile:
          state: directory
          suffix: build
        register: tempDir
        changed_when: false

      # Rather than modifying the XML files in-situ on the remote server, re copy
      # tem down and do the XML manipulation locally. This is done so we can
      # use the xml module without the need to install lxml of pip on the
      # target server.
      - name: copy the log4j file down to update it localy ( which we do as not to require the lxml python library on the target )
        fetch:
          src: '{{ java_agent_ver_folder }}/conf/logging/log4j2.xml'
          dest: '{{ tempDir.path }}/'
          mode: 0755
          flat: yes
        changed_when: false

      - name: check which xpath entries are found in the log4j2 file
        xml:
          # path: '{{ java_agent_ver_folder }}/conf/logging/log4j2.xml'
          path: '{{ tempDir.path }}/log4j2.xml'
          xpath: //AsyncLogger[@name='{{ item }}']
          count: yes
        register: hits
        delegate_to: localhost
        loop: "{{ agent_loggers }}"

      - name: Set the log level for the java agent
        xml:
          # path: '{{ java_agent_ver_folder }}/conf/logging/log4j2.xml'
          path: '{{ tempDir.path }}/log4j2.xml'
          xpath: "{{ item.actions.xpath }}" #  //AsyncLogger[@name='{{ item }}']
          attribute: level
          value: "{{ agent_log_level }}"
        loop: "{{ hits.results }}" # "{{ agent_loggers }}"
        delegate_to: localhost
        when: item.count >= 1

      - name: copy the local file back to the host
        become: true
        copy:
           src: '{{ tempDir.path }}/log4j2.xml'
           dest: '{{ java_agent_ver_folder }}/conf/logging/'
        changed_when: false

      - name: delete the temp directory
        file:
           path: "{{ tempDir.path }}"
           state: absent
        delegate_to: localhost
        changed_when: false
      when: agent_log_level|lower != 'info'
    # --------------------------------------------------------------------------

    - name: Recursively change ownership of the Java agent directory
      file:
        path: "{{ java_agent_dest_folder_linux }}"
        recurse: yes
        owner: "{{ agent_dir_permission.user | default('root') }}"
        group: "{{ agent_dir_permission.group | default('root') }}"
      when:
        - agent_dir_permission.user is defined
        - agent_dir_permission.group is defined
        - agent_dir_permission.user | length != 0
        - agent_dir_permission.group | length != 0
      ignore_errors: yes
      changed_when: false

    - name: Clean up - remove {{ java_agent_dest_file }}
      file:
        path: "{{ java_agent_dest_folder_linux }}/{{ java_agent_dest_file }}"
        state: absent
      changed_when: false # this ensures this task is idempotent
