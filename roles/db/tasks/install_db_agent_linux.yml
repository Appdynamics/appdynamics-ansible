---
- name: DB Agent Linux Block
  become: true
  block:
    - include_tasks: appd_sudoer.yml

    - include_tasks: install_java_linux.yml

    - name: Ensures DB agent dir exists
      file:
        path: "{{ db_agent_dest_folder_linux }}/"
        state: directory
        mode: 0755
        owner: "{{ appdynamics_user }}"
        group: "{{ appdynamics_user }}"
        recurse: yes
      changed_when: false # this ensures this task is idempotent

    - name: Clean out orphanned {{ db_agent_dest_file }}
      file:
        path: "{{ db_agent_dest_folder_linux }}/{{ db_agent_dest_file }}"
        state: absent
      changed_when: false # this ensures this task is idempotent

    - name: Check if DB agent exists
      stat: path="{{ db_agent_dest_folder_linux }}/db-agent.jar"
      register: previous_db_agent

    - name: Backup old DB agent to /tmp folder
      archive:
        path: "{{ db_agent_dest_folder_linux }}"
        dest: "/tmp/db_agent.{{ ansible_date_time.iso8601 }}.zip"
        mode: 0755
      when: previous_db_agent.stat.exists
      changed_when: false

    - name: Check running DB processes
      shell: "ps -ef | grep -v grep | grep -w 'db-agent' | awk '{print $2}'"
      register: running_processes
      when: previous_db_agent.stat.exists
      changed_when: false

    - debug:
       msg: "{{ running_processes.stdout_lines  }}"
      when: previous_db_agent.stat.exists
      changed_when: false

    - name: Kill running DB processes
      shell: "kill {{ item }}"
      with_items: "{{ running_processes.stdout_lines }}"
      ignore_errors: yes  # Skip 'kill: No such process' errors
      when: previous_db_agent.stat.exists
      changed_when: false

    - name: Wait for process status update
      wait_for:
        path: "/proc/{{ item }}/status"
        state: absent
      with_items: "{{ running_processes.stdout_lines }}"
      ignore_errors: yes
      register: killed_processes
      when: previous_db_agent.stat.exists
      changed_when: false

    - debug:
       msg: "{{ running_processes.stdout_lines }}"
      when: previous_db_agent.stat.exists
      changed_when: false

    - name: Force kill stuck processes
      shell: "kill -9 {{ item }}"
      with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
      when: previous_db_agent.stat.exists
      changed_when: false

    - name: Clean up old agent after backup
      command: "rm -rf {{ db_agent_dest_folder_linux }}/*"
      args:
         warn: false
      when: previous_db_agent.stat.exists
      changed_when: false

    - name: Download DB Agent
      get_url:
        url: '{{ agent_download_url.stdout }}'
        dest: "{{ db_agent_dest_folder_linux }}/{{ db_agent_dest_file }}"
        force: true # download a new file even if dbagent.zip exists.
      changed_when: false
      register: result
      failed_when: result.status_code != 200

    - debug:
         msg: "{{ result }}"

    - name: Unzip DB agent file
      unarchive:
        #src: "{{ agent_download_url.stdout }}" 
        src: "{{ db_agent_dest_folder_linux }}/{{ db_agent_dest_file }}"
        dest: "{{ db_agent_dest_folder_linux }}"
        mode: 0755
        remote_src: yes 
      changed_when: false

    - name: Configure db-agent controller-info.xml file
      template:
        src: templates/db-agent-controller-info.xml.j2
        dest: '{{ db_agent_dest_folder_linux }}/conf/controller-info.xml'
        owner: "{{ appdynamics_user }}"
        group: "{{ appdynamics_user }}"
        mode: 0755 
      changed_when: false

    - name: Add the DB Agent as a Service using Systemd
      template:
        src: templates/appdynamics-db-agent.service.j2
        dest: /etc/systemd/system/appdynamics-db-agent.service
        force: true
        owner: root # The Machine Agent must not run as root, you may change it.
        group: root
        mode: 0644
      register: db_agent_systemd_result

    - name: Enable the DB Agent to start at system startup
      systemd:
        name: appdynamics-db-agent
        enabled: yes
        force: true # Force it to override existing symlink incase of an upgrade
        masked: no

    - name: Start the agent service
      systemd:
        name: appdynamics-db-agent
        state: started
        daemon_reload: yes
      changed_when: false

    - name: Make sure the service is running
      shell: systemctl status appdynamics-db-agent
      register: result
      ignore_errors: yes
      changed_when: false

    - name: Show DB Agent status
      debug:
        var: result

    #- name: Start DB Agent service
    #  shell: "nohup java -Dappdynamics.agent.uniqueHostId={{ host_name }} -Ddbagent.name={{ db_agent_name }} -Xms1536m -jar {{ db_agent_dest_folder_linux }}/db-agent.jar </dev/null >/dev/null 2>&1 &"
      #shell: "{{ db_agent_dest_folder_linux }}/start-dbagent  -Dappdynamics.agent.uniqueHostId={{ host_name }} -Ddbagent.name={{ db_agent_name }} -Xms1536m  </dev/null >/dev/null 2>&1 &"

    - name: Get new running DB processes
      shell: "ps -ef | grep -v grep | grep -w 'db-agent' | awk '{print $2}'"
      register: db_proc
      failed_when: db_proc.stdout_lines|length == 0
      changed_when: false

    - debug: 
       msg: "{{ db_proc.stdout_lines  }}"

    - name: Clean up - remove {{ db_agent_dest_file }}
      file:
        path: "{{ db_agent_dest_folder_linux }}/{{ db_agent_dest_file }}"
        state: absent
      changed_when: false
